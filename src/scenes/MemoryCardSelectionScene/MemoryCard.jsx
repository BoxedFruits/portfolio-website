/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 memory_card.glb
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import { MathUtils } from 'three';

export function MemoryCard({ position, name, setCurrHighLighted, currHighlighted, setViewObjects, viewObjects }) {
  const { nodes, materials } = useGLTF('models/memory_card.glb')
  const myMesh = useRef()
  let startAnimation = false

  useFrame(() => {
    if (startAnimation) {
      myMesh.current.position.z = MathUtils.lerp(myMesh.current.position.z, 100, 0.002);
      myMesh.current.position.y = MathUtils.lerp(myMesh.current.position.y, -1, 0.01);
      myMesh.current.position.x = MathUtils.lerp(myMesh.current.position.x, 0, .055);

      myMesh.current.rotation.x = MathUtils.lerp(myMesh.current.rotation.x, -7, 0.009);
      myMesh.current.rotation.y = MathUtils.lerp(myMesh.current.rotation.y, 3, 0.0007);
      myMesh.current.rotation.z = MathUtils.lerp(myMesh.current.position.z, -5, 0.78);
      setTimeout(() => {
        setViewObjects(true);
      }, 750);
    }
  });

  const HandleClick = (props) => { // Todo: clean this up
    startAnimation = true;
    // setViewObjects(true); // this isn't working for some reason
  }
  // currHighlighted === name will be used for highlighting

  return (
    <group
      dispose={null}
      ref={myMesh}
      center={position}
      position={position}
      rotation-x={-0.4}
      onPointerOver={() => setCurrHighLighted(name)}
      onClick={() => {
        HandleClick(123);
      }}>
      <mesh geometry={nodes.Memory_card.geometry} material={materials['07 - Default']} rotation={[Math.PI / 2, 0, 0]} scale={0.02} />
    </group>
  )
}

useGLTF.preload('/models/memory_card.glb')
