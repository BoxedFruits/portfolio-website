/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 vanguard_logo.glb
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { MathUtils } from 'three';

const TARGET_SCALE = .55;
const MARGIN = .035; // `lerp` doesn't go up to the exact value so stop a little bit prior to target

export function VanguardLogo({ shouldRotate, getRef, animationCallback, ...props }) {
  const ref = useRef();

  const [isComponentMounted, setIsComponentMounted] = useState(false);
  const [isLoadingAnimationFinished, setIsLoadingAnimationFinished] = useState(null);

  useFrame(({ clock }) => {
    if (shouldRotate) {
      const t = clock.getElapsedTime()
      ref.current.rotation.z = t
    }

    if (isLoadingAnimationFinished === false) {
      if (ref.current.scale.x <= TARGET_SCALE - MARGIN) {
        const lerpValue = MathUtils.lerp(ref.current.scale.x, TARGET_SCALE, 0.01)
        ref.current.scale.set(lerpValue, lerpValue, lerpValue)
      } else {
        animationCallback(); // tell parent component animation is finished
        setIsLoadingAnimationFinished(true);
      }
    }
  })

  const startLoadingAnimation = async () => {
    setIsLoadingAnimationFinished(false);
  }

  useEffect(() => {
    if (!isComponentMounted) {
      getRef(ref);

      setIsComponentMounted(true);
    }
  }, [])

  const { nodes, materials } = useGLTF("models/vanguard_logo.glb")

  return (
    <group
      ref={ref}
      scale={[.55, .55, .55]}
      rotation-x={3.7}
      dispose={null}
      {...props}
      startLoadingAnimation={() => startLoadingAnimation()}
    >
      <mesh geometry={nodes.Cube.geometry} material={materials.Material} />
    </group>
  )
}

useGLTF.preload('models/vanguard_logo.glb')
